# -*- coding: utf-8 -*-
"""20240510

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpqcuINUd341sRr_pm0RJbTarv0eeGhf

csv comma seperated value 파일>콤마로 구분된 텍스트 파일

1차원 배열형태(행,열)은 시리즈/(2차원)판다스의 데이터프레임, 엑셀과 유사

프레임구조 -레코드: 행 ,칼럼: 열, 레코드명, 컬럼명

2차원 리스트를 데이터프레임으로 변환 >DataFrame메소드(2차원리스트는 컬럼명이 없어서 컬럼명을 지정,행번호는 자동으로지정됨)

describe () << sum(),count(),mean()
데이터프레임명[‘칼럼 이름‘].value_counts( )
: 데이터프레임에서 지정한 칼럼의 값별로 데이터 개수 출력
데이터프레임명.groupby(‘칼럼명‘).통계함수명( )
: groupby( )를 사용하여 그룹으로 묶을 칼럼을 지정한 뒤에 sum( ), count( ),
mean( ), std( ), max( ), min( ), median 등과 같은 통계함수를 이용해서 지정
한 칼럼별로 구분한 통계값을 계산

df.info << 1.결측치가 있는지 확인.데이터프레임명.isna( ) : 칼럼의 값이 없으면 True, 값이 있으면 False로 출력
2.데이터프레임에서 결측치에 값 채우기• 데이터프레임명.fillna({‘칼럼명’:’채울값’ }, inplace=True/False )
: 칼럼에 있는 결측치를 다른 값으로 채운다.           inplace는 사용안함(원본데이터를 사용. )
3.결측치 값은 제외 데이터프레임명.dropna(subset=[axis=0/1,'칼럼명']) > 해당 칼럼의 결측치가 있는 레코드를 삭제 , dropna() 레코드에 결측치가 하나라도 있으면 다 삭제  // axis=0이 행단위 삭제 주로 행단위로만 삭제해서 생략가능
"""

import pandas as pd
data=[[1,'Alice'],[2,'Bob'],[3,'Charlie']]
df=pd.DataFrame(data,columns=['ID','Name'])
print(df)

df = pd.DataFrame({'name':['Kim','Lee','Park'],
'age':[27, 33,19],
'score':[92,98,87]})
print(df)

df2=pd.read_csv('data.csv')      #csv파일 읽어서 데이터프레임 형성(데이터파일 불러들이기)
print(df2)

url= 'https://raw.githubusercontent.com/Datamanim/pandas/main/lol.csv'
df3=pd.read_csv(url,delimiter='\t')  #옵션은 ,로 연결
print(df3)           #콤마가 아닌 탭\으로 구분됨. 구분자 옵션으로 구분하기 !

df4=pd.read_excel('BoxOffice.xlsx')  #,로 옵션연결 > ('파일명',sheet_name='',index_col=0)    유의미한 인덱스 컬럼을 지정하기 위함
print(df4)

#data.xslx 자료참고
df5=pd.read_excel('data.xlsx')
print(df5.info())

df5=pd.read_excel('data.xlsx')                   #필요한 데이터를 선택적으로 처리
column_a=df5.반 #df5['반']도 가능
print(column_a)

df5=pd.read_excel('data.xlsx')
AB=df5.loc[2,['확인여부']]
print(AB)

df5=pd.read_excel('data.xlsx')
ab=df5['국어']>=80
print(ab)

df5=pd.read_excel('data.xlsx')
ab=df5[df5['국어']>=80]   #앞의 데이터는 t,f로만 구분  데이터프레임을 한 번 더 입혀서 해당학생의 전체정보 확인가능 #query라는 메소드로도 처리가능
print(ab)

df5=pd.read_excel('data.xlsx')
col=df5[['반','이름']]
print(col)

df5=pd.read_excel('data.xlsx')
row1_3=df5[1:4]
print(row1_3)

df5=pd.read_excel('data.xlsx')
df5.sort_values(by=['국어'],ascending=False)

import pandas as pd
data=[[1,'Alice'],[2,'Bob'],[3,'Charlie']]
df=pd.DataFrame(data,columns=['ID','Name'])
print(df)

#실습
dat=[['John',90,85,88],['Alice',87,91,89],['Bob',78,80,85],['Emily',92,88,82]]
df=pd.DataFrame(dat,columns=['학생','수학','영어','과학'])                      #딕셔너리 형식으로도 작성해보기
print(df)   #데이터프레임생성
print(df.describe()) #데이터프레임의 요약통계정보
print(df.groupby('수학').max())  #생성데이터프레임에서 '수학'점수가 가장 높은 학생의 정보
print(df[df['수학']>=90])  #'수학'점수가 90점 이상인 학생의 정보 출력

#실습2
df6=pd.read_excel('BoxOffice.xlsx')
print(df6)
print(df6.info())
print(df6.value_counts('국적'))
print(df6[df6['국적']=='영국'])
print(df6.groupby('국적')*min('순위'))    #대표국적별 최상위 순위 출력 min함수 사용